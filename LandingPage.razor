@inject ProductContext productcontext
@inject ISnackbar Snackbar
<MudThemeProvider IsDarkMode="true" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudMainContent Class="pt-0">
        <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
            <MudTabPanel Text="Intro">
                <WpfApp1.RazorFiles.Intro />
            </MudTabPanel>
            <MudTabPanel Text="Show Data" Disabled="!showdata">
                @if (showdata)
                {
                    @if (productcontext.Products.Any())
                    {
                        @foreach (var item in productcontext.Categories)
                        {
                            <MudCard Class="ma-1">
                                <MudCardContent>
                                    <MudText><b>Catagory Name:</b> @item.Name <b>Id:</b> @item.CategoryId</MudText>

                                    @foreach (var SubItem in item.Products)
                                    {
                                        <MudText Typo="Typo.body2"><b>Product Name:</b> @SubItem.Name <b>ProductId:</b> @SubItem.ProductId</MudText>                                  
                                    }
                                </MudCardContent>
                            </MudCard>
                        }
                    }
                }
            </MudTabPanel>
            <MudTabPanel Text="THE BUTTON" Disabled="!showdata">
                <MudItem Class="pa-8 ma-8">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="AddRandomProduct">Add Random Data to Database</MudButton>
                </MudItem>
            </MudTabPanel>
            <MudTabPanel Text="New Product">
                <WpfApp1.RazorFiles.Product />
            </MudTabPanel>
            <MudTabPanel Text="New Category" Disabled="!showdata">
                <WpfApp1.RazorFiles.Category />
            </MudTabPanel>
            <MudTabPanel Text="Sales" Disabled="!showdata">
                <WpfApp1.RazorFiles.SalesGraph />
            </MudTabPanel>

            <MudTabPanel Text="Loader" Disabled="!showdata">
                <WpfApp1.RazorFiles.Loader />
            </MudTabPanel>
        </MudTabs>
    </MudMainContent>
</MudLayout>
@code {

    bool showdata;

    protected override async Task OnInitializedAsync()
    {
        await productcontext.Database.EnsureCreatedAsync();
        await AddRandomCategory();
        await AddRandomProduct();
        showdata = true;
    }

    async Task AddRandomCategory()
    {
        if (productcontext.Categories.Any())
        {
            //skipping
        }
        else
        {
            productcontext.Attach(new Category { Name = "First Category" });
            productcontext.Attach(new Category { Name = "Second Category" });
            productcontext.Attach(new Category { Name = "Third Category" });
            productcontext.Attach(new Category { Name = "Forth Category" });
            productcontext.Attach(new Category { Name = "Fith Category" });
        }

        await productcontext.SaveChangesAsync();
    }

    async Task AddRandomProduct()
    {
        Random random = new Random();
        int min = 1;
        int max = 1;
        if (productcontext.Categories.Any())
        {
            List<int> AllCats = productcontext.Categories.Select(x => x.CategoryId).ToList();
            min = AllCats.First();
            max = AllCats.Last() + 1;
        }
        productcontext.Attach(new Product { Name = MagicalProductNameCreator(max), CategoryId = random.Next(min, max), });
        await productcontext.SaveChangesAsync();
        Snackbar.Add("New Item Added", Severity.Normal);
  
    }


    public string MagicalProductNameCreator(int requestedLength)
    {
        Random rnd = new Random();
        string[] consonants = { "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z" };
        string[] vowels = { "a", "e", "i", "o", "u" };

        string word = "";

        if (requestedLength == 1)
        {
            word = GetRandomLetter(rnd, vowels);
        }
        else
        {
            for (int i = 0; i < requestedLength; i += 2)
            {
                word += GetRandomLetter(rnd, consonants) + GetRandomLetter(rnd, vowels);
            }

            word = word.Replace("q", "qu").Substring(0, requestedLength); // We may generate a string longer than requested length, but it doesn't matter if cut off the excess.
        }

        return word;
    }
    private static string GetRandomLetter(Random rnd, string[] letters)
    {
        return letters[rnd.Next(0, letters.Length - 1)];
    }
}